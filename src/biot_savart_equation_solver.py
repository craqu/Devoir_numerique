import math

import numpy as np
from scipy.constants import mu_0, pi

from src.fields import VectorField


class BiotSavartEquationSolver:
    """
    A Biot–Savart law solver used to compute the resultant magnetic field B in 2D-space generated by a constant current
    field I (for example due to wires).
    """

    def solve(self, electric_current: VectorField) -> VectorField:
        """
        Solve the Biot–Savart equation to compute the magnetic field given an electric current field.

        Parameters
        ----------
        electric_current : VectorField
            A vector field I : ℝ² → ℝ³ ; (x, y) → (I_x(x, y), I_y(x, y), I_z(x, y)), where I_x(x, y), I_y(x, y) and
            I_z(x, y) are the 3 components of the electric current vector at a given point (x, y) in space. Note that
            I_z = 0 is always True in our 2D world.

        Returns
        -------
        magnetic_field : VectorField
            A vector field B : ℝ² → ℝ³ ; (x, y) → (B_x(x, y), B_y(x, y), B_z(x, y)), where B_x(x, y), B_y(x, y) and
            B_z(x, y) are the 3 components of the magnetic vector at a given point (x, y) in space. Note that
            B_x = B_y = 0 is always True in our 2D world.
        """
        x, y, z = electric_current.shape
        x, y, z = int(x), int(y), int(z)
        resultante = np.zeros((x, y, z))
        for i in range(int(x)):
            for j in range(int(y)):
                if electric_current[i, j, :].all == [0, 0, 0]:
                    continue
                else:
                    empty_field = electric_current.copy()
                    for m in range(x):
                        for n in range(y):
                            if electric_current[m, n, :].all == [0, 0, 0]:
                                r_x = i-m
                                r_y = j-n
                                r = np.array(r_x, r_y, 0)
                                d = math.sqrt((r_x)**2 + (r_y)**2)
                                mu_0 = 1.25663706*(10**(-6))
                                pi4 = 4*math.pi
                                I = electric_current[i, j]
                                I_cross_r = np.cross(I, r)

                                empty_field[m, n] = mu_0*(I_cross_r/(pi4*d**3))
                            else:
                                continue
                    resultante = np.add(resultante, empty_field)
        return resultante







        pass
